{
  "hash": "556f37b8fba3fa573f8902ef4aa62843",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"{{< var icon.computer-activity >}} Review of Programming in Python I\"\njupyter: python3\n---\n\nThe material for this lecture is best experienced as a Jupyter Notebook.\nGo to PrairieLearn [Class Activity 2A]({{< var course.prairielearn >}}/assessment/2495512) and open the workspace in the question there to get access to a cloud-based version of this notebook.\n\n![Photo by [Christina Morillo](https://www.pexels.com/photo/two-women-sitting-on-sofa-holding-laptop-computers-1181268) from Pexels](/images/programming.jpg){fig-alt=\"Two women sitting on sofa holding laptop computers.\"}\n\n**Note: Some images may look slightly different than yours as the software gets more polished and icons/user interfaces change, but this should give you a general gist of the essential things.**\n\n![](/images/base.png)\n\n![](/images/notebook1.png)\n\n![](/images/notebook2.png)\n\n![](/images/notebook3.png)\n\n![](/images/notebook4.png)\n\n![](/images/notebook5.png)\n\n![](/images/notebook6.png)\n\n## Part 1: Introduction (30 mins)\n\n## Outline:\n\n-   Part 1: Review of Python\n    -   Basic datatypes\n    -   Lists and tuples\n    -   Break (5 min)\n    -   String methods\n    -   Dictionaries\n    -   Conditionals\n\n![](/images/bus_stop.jpg)\n\n## Datatypes in Python\n\nPython has several data types available.\nThe diagram below [from Geeks for Geeks](https://www.geeksforgeeks.org/python-data-types/) shows a nice summary of how the datatypes are classified, and examples of each.\nYou'll notice that some types are in a class of their own (`dict`, `set`, `bool`) whereas other ones are similar but have distinguishing features (`list`/`tuple`/`str` and `int`/`float` etc...).\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20191023173512/Python-data-structure.jpg)\n\n### Common built-in Python data types\n\n| English name | Type name | Description | Example |\n|:---|:---|:---|:---|\n| integer | `int` | positive/negative whole numbers | `42` |\n| floating point number | `float` | real number in decimal form | `3.14159` |\n| boolean | `bool` | true or false | `True` |\n| string | `str` | text | `\"I Can Has Cheezburger?\"` |\n| list | `list` | a collection of objects - mutable & ordered | `['Ali','Xinyi','Miriam']` |\n| tuple | `tuple` | a collection of objects - immutable & ordered | `('Thursday',6,9,2018)` |\n| dictionary | `dict` | mapping of key-value pairs | `{'name':'DSCI','code':511,'credits':2}` |\n| none | `NoneType` | represents no value | `None` |\n\n### Variables and Values\n\n-   A **value** is a piece of data that a computer program works with such as a number or text.\n\n-   There are different **types** of values: `42` is an integer and `\"Hello!\"` is a string.\n\n-   A **variable** is a name that refers to a value.\n\n    -   In mathematics and statistics, we usually use variables names like $x$ and $y$.\n    -   In Python, we can use any word as a variable name (as long as it starts with a letter and is not a [reserved word](https://docs.python.org/3.3/reference/lexical_analysis.html#keywords) in Python such as `for`, `while`, `class`, `lambda`, etc.).\n\n-   And we use the **assignment operator** `=` to assign a value to a variable.\n\n-   See the [Python 3 documentation](https://docs.python.org/3/library/stdtypes.html) for a summary of the standard built-in Python datatypes.\n\n-   See [Think Python (Chapter 2)](http://greenteapress.com/thinkpython/html/thinkpython003.html) for a discussion of variables, expressions and statements in Python.\n\n### Numeric Types\n\n::: {#6a453540 .cell execution_count=1}\n``` {.python .cell-code}\nx = 42.5\n```\n:::\n\n\n::: {#7de18380 .cell execution_count=2}\n``` {.python .cell-code}\ntype(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#24476754 .cell execution_count=3}\n``` {.python .cell-code}\nx = 5\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n::: {#e990db2d .cell execution_count=4}\n``` {.python .cell-code}\nx=5\nx-2\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n3\n```\n:::\n:::\n\n\n::: {#4580fe5a .cell execution_count=5}\n``` {.python .cell-code}\npi = 3.14159\n```\n:::\n\n\n::: {#73e7818f .cell execution_count=6}\n``` {.python .cell-code}\nprint(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.14159\n```\n:::\n:::\n\n\n::: {#f98a0851 .cell execution_count=7}\n``` {.python .cell-code}\ntype(pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nfloat\n```\n:::\n:::\n\n\n#### Arithmetic Operators\n\nThe syntax for the arithmetic operators are:\n\n| Operator |   Description    |\n|:--------:|:----------------:|\n|   `+`    |     addition     |\n|   `-`    |   subtraction    |\n|   `*`    |  multiplication  |\n|   `/`    |     division     |\n|   `**`   |  exponentiation  |\n|   `//`   | integer division |\n|   `%`    |      modulo      |\n\nLet's apply these operators to numeric types and observe the results.\n\n::: {#d8d7be69 .cell execution_count=8}\n``` {.python .cell-code}\n1 + 2 + 3 + 4 + 5\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n15\n```\n:::\n:::\n\n\n::: {#2b172955 .cell execution_count=9}\n``` {.python .cell-code}\n0.1 + 0.2\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0.30000000000000004\n```\n:::\n:::\n\n\n::: callout-tip\nFrom Firas: This is floating point arithmetic.\nFor an explanation of what's going on, [see this tutorial](https://docs.python.org/3/tutorial/floatingpoint.html).\n:::\n\n::: {#a5bacd4c .cell execution_count=10}\n``` {.python .cell-code}\n2 * 3.14159\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n6.28318\n```\n:::\n:::\n\n\n::: {#1f444275 .cell execution_count=11}\n``` {.python .cell-code}\n2**10\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n1024\n```\n:::\n:::\n\n\n::: {#5ad74308 .cell execution_count=12}\n``` {.python .cell-code}\ntype(2**10)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nint\n```\n:::\n:::\n\n\n::: {#5101d662 .cell execution_count=13}\n``` {.python .cell-code}\n2.0**10\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n1024.0\n```\n:::\n:::\n\n\n::: {#5f4aea9a .cell execution_count=14}\n``` {.python .cell-code}\nint_2 = 2\n```\n:::\n\n\n::: {#368859e1 .cell execution_count=15}\n``` {.python .cell-code}\nfloat_2 = 2.0\n```\n:::\n\n\n::: {#0afae2fe .cell execution_count=16}\n``` {.python .cell-code}\nfloat_2_again = 2.\n```\n:::\n\n\n::: {#d920c8aa .cell execution_count=17}\n``` {.python .cell-code}\n107 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n53.5\n```\n:::\n:::\n\n\n::: {#a1d94699 .cell execution_count=18}\n``` {.python .cell-code}\n107 // 2 # \"integer division\" - always rounds down\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n53\n```\n:::\n:::\n\n\n::: {#fcd9cd4b .cell execution_count=19}\n``` {.python .cell-code}\n101 % 2 # \"101 mod 2\", or the remainder when 101 is divided by 2\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n1\n```\n:::\n:::\n\n\n### Strings\n\n-   Text is stored as a type called a string.\n-   We think of a string as a sequence of characters.\n-   We write strings as characters enclosed with either:\n    -   single quotes, e.g., `'Hello'`\n    -   double quotes, e.g., `\"Goodbye\"`\n    -   triple single quotes, e.g., `'''Yesterday'''`\n    -   triple double quotes, e.g., `\"\"\"Tomorrow\"\"\"`\n\n::: {#c54b1455 .cell execution_count=20}\n``` {.python .cell-code}\nmy_name = \"Firas Moosvi\"\n```\n:::\n\n\n::: {#10b1e816 .cell execution_count=21}\n``` {.python .cell-code}\nprint(my_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFiras Moosvi\n```\n:::\n:::\n\n\n::: {#f9fbceff .cell execution_count=22}\n``` {.python .cell-code}\ntype(my_name)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nstr\n```\n:::\n:::\n\n\n::: {#49caebc8 .cell execution_count=23}\n``` {.python .cell-code}\ncourse = 'CPSC 203'\n```\n:::\n\n\n::: {#217ae25f .cell execution_count=24}\n``` {.python .cell-code}\nprint(course)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPSC 203\n```\n:::\n:::\n\n\n::: {#ab52515f .cell execution_count=25}\n``` {.python .cell-code}\ntype(course)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nstr\n```\n:::\n:::\n\n\nIf the string contains a quotation or apostrophe, we can use double quotes or triple quotes to define the string.\n\n::: {#4f1f2b0d .cell execution_count=26}\n``` {.python .cell-code}\nsentence = \"It's a rainy day.\"\n```\n:::\n\n\n::: {#34d9a45a .cell execution_count=27}\n``` {.python .cell-code}\nprint(sentence)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIt's a rainy day.\n```\n:::\n:::\n\n\n::: {#023620f2 .cell execution_count=28}\n``` {.python .cell-code}\ntype(sentence)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nstr\n```\n:::\n:::\n\n\n::: {#78c82e4e .cell execution_count=29}\n``` {.python .cell-code}\nsaying = '''They say: \n\"It's a rainy day!\"'''\n```\n:::\n\n\n::: {#047fa419 .cell execution_count=30}\n``` {.python .cell-code}\nprint(saying)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say: \n\"It's a rainy day!\"\n```\n:::\n:::\n\n\n### Sequence Type\n\nThis datatype contains three subtypes and serves as a good way to \"hold/store stuff\" - a container.\n\nEach subtype has their own unique distinguishing features but they can all hold items of any type (and multiple types).\n\nBelow are the main differences between lists, tuples, and sets:\n\n-   `list`: items are ordered, and **can** be edited, changed after insertion.\n-   `set`: items are unique, but not ordered. Items cannot be replaced or changed, but can be removed or added.\n-   `tuple`: items are ordered, but cannot be replaced or changed once created.\n\n::: {#14502df1 .cell execution_count=31}\n``` {.python .cell-code}\nmylist = ['one','two','apples','three','apples',600.50, 50, 'banana']\n```\n:::\n\n\n::: {#dd5cc97e .cell execution_count=32}\n``` {.python .cell-code}\nset(mylist)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n{50, 600.5, 'apples', 'banana', 'one', 'three', 'two'}\n```\n:::\n:::\n\n\n::: {#c14276dd .cell execution_count=33}\n``` {.python .cell-code}\nmytuple = ('one','two','apples', 600.5)\n\nmytuple\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n('one', 'two', 'apples', 600.5)\n```\n:::\n:::\n\n\n::: {#f4287ef6 .cell execution_count=34}\n``` {.python .cell-code}\nmytuple +('blagreenck',)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n('one', 'two', 'apples', 600.5, 'blagreenck')\n```\n:::\n:::\n\n\n#### Sets\n\n-   Another built-in Python data type is the `set`, which stores an *un-ordered* list of *unique* items.\n\n::: {#6edd9f2e .cell execution_count=35}\n``` {.python .cell-code}\ns = {2,3,5,11}\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n{2, 3, 5, 11}\n```\n:::\n:::\n\n\n::: {#5138d9b6 .cell execution_count=36}\n``` {.python .cell-code}\n{1,2,3} == {3,2,1}\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#26cfde62 .cell execution_count=37}\n``` {.python .cell-code}\n[1,2,3] == [3,2,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#f7bd3f2c .cell execution_count=38}\n``` {.python .cell-code}\ns.add(2) # does nothing\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n{2, 3, 5, 11}\n```\n:::\n:::\n\n\n::: {#b5dfc2c9 .cell execution_count=39}\n``` {.python .cell-code}\ns[0]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">s</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'set' object is not subscriptable</pre>\n```\n:::\n\n:::\n:::\n\n\nAbove: throws an error because elements are not ordered.\n\n### Boolean\n\n-   The Boolean (`bool`) type has two values: `True` and `False`.\n\n::: {#169b1d0a .cell execution_count=40}\n``` {.python .cell-code}\nthe_truth = True\n```\n:::\n\n\n::: {#3f373155 .cell execution_count=41}\n``` {.python .cell-code}\nprint(the_truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#91076552 .cell execution_count=42}\n``` {.python .cell-code}\ntype(the_truth)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\nbool\n```\n:::\n:::\n\n\n::: {#4c31af3c .cell execution_count=43}\n``` {.python .cell-code}\nlies = False\n```\n:::\n\n\n::: {#65b9cfb0 .cell execution_count=44}\n``` {.python .cell-code}\nprint(lies)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#6c96578e .cell execution_count=45}\n``` {.python .cell-code}\ntype(lies)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\nbool\n```\n:::\n:::\n\n\n#### Comparison Operators\n\nCompare objects using comparison operators.\nThe result is a Boolean value.\n\n| Operator | Description                          |\n|:--------:|:-------------------------------------|\n| `x == y` | is `x` equal to `y`?                 |\n| `x != y` | is `x` not equal to `y`?             |\n| `x > y`  | is `x` greater than `y`?             |\n| `x >= y` | is `x` greater than or equal to `y`? |\n| `x < y`  | is `x` less than `y`?                |\n| `x <= y` | is `x` less than or equal to `y`?    |\n| `x is y` | is `x` the same object as `y`?       |\n\n::: {#d6c2c701 .cell execution_count=46}\n``` {.python .cell-code}\n2 < 3\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#d690c76f .cell execution_count=47}\n``` {.python .cell-code}\n\"Data Science\" != \"Deep Learning\"\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#daf01d25 .cell execution_count=48}\n``` {.python .cell-code}\n2.0 == \"two\"\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#512f67d1 .cell execution_count=49}\n``` {.python .cell-code}\n2 == 2.0\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nTrue\n```\n:::\n:::\n\n\nNote: we will discuss `is` next week.\n\nOperators on Boolean values.\n\n| Operator  | Description                         |\n|:---------:|:------------------------------------|\n| `x and y` | are `x` and `y` both true?          |\n| `x or y`  | is at least one of `x` or `y` true? |\n|  `not x`  | is `x` false?                       |\n\n::: {#20f8afcb .cell execution_count=50}\n``` {.python .cell-code}\nTrue and True\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#4b5f0242 .cell execution_count=51}\n``` {.python .cell-code}\nTrue and False\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#e88d2459 .cell execution_count=52}\n``` {.python .cell-code}\nFalse or False\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#7774c939 .cell execution_count=53}\n``` {.python .cell-code}\n(\"Python 2\" != \"Python 3\") and (2 <= 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#3a04286e .cell execution_count=54}\n``` {.python .cell-code}\nnot True\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#3831aa66 .cell execution_count=55}\n``` {.python .cell-code}\nnot not True\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\nTrue\n```\n:::\n:::\n\n\n### NoneType\n\n-   `NoneType` is its own type in Python.\n-   It only has one possible value, `None`\n-   You may have seen similar things in other languages, like `null` in Java, etc.\n\n::: {#0716eca5 .cell execution_count=56}\n``` {.python .cell-code}\nx = None\n```\n:::\n\n\n::: {#3625d836 .cell execution_count=57}\n``` {.python .cell-code}\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\n::: {#0efe384f .cell execution_count=58}\n``` {.python .cell-code}\ntype(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\nNoneType\n```\n:::\n:::\n\n\n::: {#9c1bdd80 .cell execution_count=59}\n``` {.python .cell-code}\nbool(None)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\nFalse\n```\n:::\n:::\n\n\n### Dictionaries\n\nDictionaries are **awesome**!\nWe'll look at those in a lot more detail soon.\n\n## Break!\n\n## Dictionaries (10 min)\n\nA dictionary is a mapping between key-values pairs.\n\n::: {#ab93eee8 .cell execution_count=60}\n``` {.python .cell-code}\nhouse = {'bedrooms': 3, \n         'bathrooms': 2, \n         'city': 'Vancouver', \n         'price': 2499999, \n         'date_sold': (1,3,2015)}\n\ncondo = {'bedrooms' : 2, \n         'bathrooms': 1, \n         'city'     : 'Burnaby', \n         'price'    : 699999, \n         'date_sold': (27,8,2011)\n        }\n```\n:::\n\n\n::: {#f37d9d35 .cell execution_count=61}\n``` {.python .cell-code}\nhouse\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n{'bedrooms': 3,\n 'bathrooms': 2,\n 'city': 'Vancouver',\n 'price': 2499999,\n 'date_sold': (1, 3, 2015)}\n```\n:::\n:::\n\n\nWe can access a specific field of a dictionary with square brackets:\n\n::: {#74e8a6f2 .cell execution_count=62}\n``` {.python .cell-code}\nhouse['price']\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n2499999\n```\n:::\n:::\n\n\n::: {#54ea33d9 .cell execution_count=63}\n``` {.python .cell-code}\ncondo['city']\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n'Burnaby'\n```\n:::\n:::\n\n\nWe can also edit dictionaries (they are mutable):\n\n::: {#9c6afc72 .cell execution_count=64}\n``` {.python .cell-code}\ncondo['price'] = 5 # price already in the dict\ncondo\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n{'bedrooms': 2,\n 'bathrooms': 1,\n 'city': 'Burnaby',\n 'price': 5,\n 'date_sold': (27, 8, 2011)}\n```\n:::\n:::\n\n\n::: {#fde59c82 .cell execution_count=65}\n``` {.python .cell-code}\ncondo['flooring'] = \"wood\"\n```\n:::\n\n\n::: {#2c09de8c .cell execution_count=66}\n``` {.python .cell-code}\ncondo\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n{'bedrooms': 2,\n 'bathrooms': 1,\n 'city': 'Burnaby',\n 'price': 5,\n 'date_sold': (27, 8, 2011),\n 'flooring': 'wood'}\n```\n:::\n:::\n\n\nWe can delete fields entirely (though I rarely use this):\n\n::: {#86830bb3 .cell execution_count=67}\n``` {.python .cell-code}\ndel condo[\"city\"]\n```\n:::\n\n\n::: {#44f10f2c .cell execution_count=68}\n``` {.python .cell-code}\ncondo\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\n{'bedrooms': 2,\n 'bathrooms': 1,\n 'price': 5,\n 'date_sold': (27, 8, 2011),\n 'flooring': 'wood'}\n```\n:::\n:::\n\n\n::: {#991dcc45 .cell execution_count=69}\n``` {.python .cell-code}\ncondo[5] = 443345\n```\n:::\n\n\n::: {#b220e5ec .cell execution_count=70}\n``` {.python .cell-code}\ncondo\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n{'bedrooms': 2,\n 'bathrooms': 1,\n 'price': 5,\n 'date_sold': (27, 8, 2011),\n 'flooring': 'wood',\n 5: 443345}\n```\n:::\n:::\n\n\n::: {#3a0f3e56 .cell execution_count=71}\n``` {.python .cell-code}\ncondo[(1,2,3)] = 777\ncondo\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n{'bedrooms': 2,\n 'bathrooms': 1,\n 'price': 5,\n 'date_sold': (27, 8, 2011),\n 'flooring': 'wood',\n 5: 443345,\n (1, 2, 3): 777}\n```\n:::\n:::\n\n\n::: {#bdbf548a .cell execution_count=72}\n``` {.python .cell-code}\ncondo[\"nothere\"]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">KeyError</span>                                  Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[72], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">condo</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">nothere</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-red-fg\">KeyError</span>: 'nothere'</pre>\n```\n:::\n\n:::\n:::\n\n\nA sometimes useful trick about default values:\n\n::: {#7ef5d0f5 .cell execution_count=73}\n``` {.python .cell-code}\ncondo[\"bedrooms\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n2\n```\n:::\n:::\n\n\nis shorthand for\n\n::: {#ed1a19f7 .cell execution_count=74}\n``` {.python .cell-code}\ncondo.get(\"bedrooms\")\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n2\n```\n:::\n:::\n\n\n::: {#7598b225 .cell execution_count=75}\n``` {.python .cell-code}\ntype(condo.get('nothere'))\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\nNoneType\n```\n:::\n:::\n\n\nWith this syntax you can also use default values:\n\n::: {#c7444aa2 .cell execution_count=76}\n``` {.python .cell-code}\ncondo.get(\"bedrooms\", \"unknown\")\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n2\n```\n:::\n:::\n\n\n::: {#87a12645 .cell execution_count=77}\n``` {.python .cell-code}\ncondo.get(\"fireplaces\", \"FREEZER\")\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n'FREEZER'\n```\n:::\n:::\n\n\n-   A common operation is finding the maximum dictionary key by value.\n-   There are a few ways to do this, see [this StackOverflow page](https://stackoverflow.com/questions/268272/getting-key-with-maximum-value-in-dictionary).\n-   One way of doing it:\n\n::: {#3f4b677f .cell execution_count=78}\n``` {.python .cell-code}\nmax(word_lengths, key=word_lengths.get)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[78], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">max</span>(<span class=\"ansi-yellow-bg\">word_lengths</span>, key<span style=\"color:rgb(98,98,98)\">=</span>word_lengths<span style=\"color:rgb(98,98,98)\">.</span>get)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'word_lengths' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWe saw `word_lengths.get` above - it is saying that we should call this function on each key of the dict to decide how to sort.\n\n## Indexing Sequences (Lists and Tuples) (20 min)\n\n-   Lists and tuples allow us to store multiple things (\"elements\") in a single object.\n-   The elements are *ordered*.\n-   We can access values inside a list, tuple, or string using the bracket syntax.\n-   Python uses zero-based indexing, which means the first element of the list is in position 0, not position 1.\n\n::: {#740d6987 .cell execution_count=79}\n``` {.python .cell-code}\nmy_list = [1, 2, \"THREE\", 4, 0.5]\n```\n:::\n\n\n::: {#832966c5 .cell execution_count=80}\n``` {.python .cell-code}\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 'THREE', 4, 0.5]\n```\n:::\n:::\n\n\n::: {#e2678149 .cell execution_count=81}\n``` {.python .cell-code}\ntype(my_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\nlist\n```\n:::\n:::\n\n\nYou can get the length of the list with `len`:\n\n::: {#35c88265 .cell execution_count=82}\n``` {.python .cell-code}\nlen(my_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\n5\n```\n:::\n:::\n\n\n::: {#5df318ea .cell execution_count=83}\n``` {.python .cell-code}\ntoday = (1, 2, \"THREE\", 4, 0.5)\n```\n:::\n\n\n::: {#a44159b5 .cell execution_count=84}\n``` {.python .cell-code}\nprint(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 'THREE', 4, 0.5)\n```\n:::\n:::\n\n\n::: {#ae1e310e .cell execution_count=85}\n``` {.python .cell-code}\ntype(today)\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\ntuple\n```\n:::\n:::\n\n\n::: {#f98f0e46 .cell execution_count=86}\n``` {.python .cell-code}\nlen(today)\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\n5\n```\n:::\n:::\n\n\n::: {#04c553e7 .cell execution_count=87}\n``` {.python .cell-code}\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\n[1, 2, 'THREE', 4, 0.5]\n```\n:::\n:::\n\n\n::: {#79046c77 .cell execution_count=88}\n``` {.python .cell-code}\nmy_list[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n1\n```\n:::\n:::\n\n\n::: {#3fe98387 .cell execution_count=89}\n``` {.python .cell-code}\nmy_list[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\n0.5\n```\n:::\n:::\n\n\n::: {#565e2bd3 .cell execution_count=90}\n``` {.python .cell-code}\nmy_list[5]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[90], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">my_list</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e6baaaf9 .cell execution_count=91}\n``` {.python .cell-code}\ntoday[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```\n0.5\n```\n:::\n:::\n\n\nWe can use negative indices to count backwards from the end of the list.\n\n::: {#cc99a3d7 .cell execution_count=92}\n``` {.python .cell-code}\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=92}\n```\n[1, 2, 'THREE', 4, 0.5]\n```\n:::\n:::\n\n\n::: {#9564f527 .cell execution_count=93}\n``` {.python .cell-code}\nmy_list[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```\n0.5\n```\n:::\n:::\n\n\nWe use the colon `:` to access a subsequence.\nThis is called \"slicing\".\n\n::: {#7ddeb0fd .cell execution_count=94}\n``` {.python .cell-code}\nmy_list[1:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\n[2, 'THREE', 4]\n```\n:::\n:::\n\n\n-   Above: note that the start is inclusive and the end is exclusive.\n-   So `my_list[1:3]` fetches elements 1 and 2, but not 3.\n-   In other words, it gets the 2nd and 3rd elements in the list.\n\nWe can omit the start or end:\n\n::: {#4a50fc52 .cell execution_count=95}\n``` {.python .cell-code}\nmy_list[:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\n[1, 2, 'THREE']\n```\n:::\n:::\n\n\n::: {#29968912 .cell execution_count=96}\n``` {.python .cell-code}\nmy_list[3:]\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\n[4, 0.5]\n```\n:::\n:::\n\n\n::: {#a4492d08 .cell execution_count=97}\n``` {.python .cell-code}\nmy_list[:] # *almost* same as my_list - more details next week\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\n[1, 2, 'THREE', 4, 0.5]\n```\n:::\n:::\n\n\nStrings behave the same as lists and tuples when it comes to indexing and slicing.\n\n::: {#d2b491a9 .cell execution_count=98}\n``` {.python .cell-code}\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\n```\n:::\n\n\n::: {#0eed684b .cell execution_count=99}\n``` {.python .cell-code}\nalphabet[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\n'a'\n```\n:::\n:::\n\n\n::: {#16e3629f .cell execution_count=100}\n``` {.python .cell-code}\nalphabet[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\n'z'\n```\n:::\n:::\n\n\n::: {#3b7b2388 .cell execution_count=101}\n``` {.python .cell-code}\nalphabet[-3]\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\n'x'\n```\n:::\n:::\n\n\n::: {#2b1aa1dd .cell execution_count=102}\n``` {.python .cell-code}\nalphabet[:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```\n'abcde'\n```\n:::\n:::\n\n\n::: {#9ee596d6 .cell execution_count=103}\n``` {.python .cell-code}\nalphabet[12:20]\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\n'mnopqrst'\n```\n:::\n:::\n\n\n### List Methods\n\n-   A list is an object and it has methods for interacting with its data.\n-   For example, `list.append(item)` appends an item to the end of the list.\n-   See the documentation for more [list methods](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists).\n\n::: {#fddff89e .cell execution_count=104}\n``` {.python .cell-code}\nprimes = [2,3,5,7,11]\nprimes\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```\n[2, 3, 5, 7, 11]\n```\n:::\n:::\n\n\n::: {#11e419f3 .cell execution_count=105}\n``` {.python .cell-code}\nlen(primes)\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n5\n```\n:::\n:::\n\n\n::: {#6a27a03a .cell execution_count=106}\n``` {.python .cell-code}\nprimes.append(13)\n```\n:::\n\n\n::: {#eb4fba89 .cell execution_count=107}\n``` {.python .cell-code}\nprimes\n```\n\n::: {.cell-output .cell-output-display execution_count=107}\n```\n[2, 3, 5, 7, 11, 13]\n```\n:::\n:::\n\n\n::: {#2b606cdc .cell execution_count=108}\n``` {.python .cell-code}\nlen(primes)\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```\n6\n```\n:::\n:::\n\n\n::: {#5d3e7861 .cell execution_count=109}\n``` {.python .cell-code}\nmax(primes)\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\n13\n```\n:::\n:::\n\n\n::: {#47f945a8 .cell execution_count=110}\n``` {.python .cell-code}\nmin(primes)\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```\n2\n```\n:::\n:::\n\n\n::: {#ba046ce5 .cell execution_count=111}\n``` {.python .cell-code}\nsum(primes)\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\n41\n```\n:::\n:::\n\n\n::: {#9a3fecd1 .cell execution_count=112}\n``` {.python .cell-code}\nw =[1,2,3] + [\"Hello\", 7]\nw\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\n[1, 2, 3, 'Hello', 7]\n```\n:::\n:::\n\n\n::: {#2d8f383e .cell execution_count=113}\n``` {.python .cell-code}\ntype(w)\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```\nlist\n```\n:::\n:::\n\n\n#### Mutable vs. Immutable Types\n\n-   Strings and tuples are immutable types which means they cannot be modified.\n-   Lists are mutable and we can assign new values for its various entries.\n-   This is the main difference between lists and tuples.\n\n::: {#c5150dc7 .cell execution_count=114}\n``` {.python .cell-code}\nnames_list = [\"Indiana\",\"Fang\",\"Linsey\"]\nnames_list\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\n['Indiana', 'Fang', 'Linsey']\n```\n:::\n:::\n\n\n::: {#36ce0449 .cell execution_count=115}\n``` {.python .cell-code}\nnames_list[0] = \"Cool guy\"\nnames_list\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```\n['Cool guy', 'Fang', 'Linsey']\n```\n:::\n:::\n\n\n::: {#1d3750cf .cell execution_count=116}\n``` {.python .cell-code}\nnames_tuple = (\"Indiana\",\"Fang\",\"Linsey\")\nnames_tuple\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```\n('Indiana', 'Fang', 'Linsey')\n```\n:::\n:::\n\n\n::: {#6cfce8bd .cell execution_count=117}\n``` {.python .cell-code}\nnames_tuple[0] = \"Not cool guy\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[117], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> names_tuple[<span style=\"color:rgb(98,98,98)\">0</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Not cool guy</span><span style=\"color:rgb(175,0,0)\">\"</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\nSame goes for strings.\nOnce defined we cannot modifiy the characters of the string.\n\n::: {#b6e0dbb9 .cell execution_count=118}\n``` {.python .cell-code}\nmy_name = \"Firas\"\n```\n:::\n\n\n::: {#4cf004ff .cell execution_count=119}\n``` {.python .cell-code}\nmy_name[-1] = 'q'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[119], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> my_name[<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">q</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'str' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e00be3fd .cell execution_count=120}\n``` {.python .cell-code}\nx = ([1,2,3],5)\n```\n:::\n\n\n::: {#4296ff60 .cell execution_count=121}\n``` {.python .cell-code}\nx[1] = 7\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[121], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> x[<span style=\"color:rgb(98,98,98)\">1</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">7</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8a82034d .cell execution_count=122}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```\n([1, 2, 3], 5)\n```\n:::\n:::\n\n\n::: {#9314ae6f .cell execution_count=123}\n``` {.python .cell-code}\nx[0][1] = 4\n```\n:::\n\n\n::: {#d02e9326 .cell execution_count=124}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```\n([1, 4, 3], 5)\n```\n:::\n:::\n\n\n## String Methods (5 min)\n\n-   There are various useful string methods in Python.\n\n::: {#232ed021 .cell execution_count=125}\n``` {.python .cell-code}\nall_caps = \"HOW ARE YOU TODAY?\"\nprint(all_caps)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHOW ARE YOU TODAY?\n```\n:::\n:::\n\n\n::: {#095a4f1c .cell execution_count=126}\n``` {.python .cell-code}\nnew_str = all_caps.lower()\nnew_str\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```\n'how are you today?'\n```\n:::\n:::\n\n\nNote that the method lower doesn't change the original string but rather returns a new one.\n\n::: {#8c272180 .cell execution_count=127}\n``` {.python .cell-code}\nall_caps\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\n'HOW ARE YOU TODAY?'\n```\n:::\n:::\n\n\nThere are *many* string methods.\nCheck out the [documentation](https://docs.python.org/3/library/stdtypes.html#string-methods).\n\n::: {#55039083 .cell execution_count=128}\n``` {.python .cell-code}\nall_caps.split()\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```\n['HOW', 'ARE', 'YOU', 'TODAY?']\n```\n:::\n:::\n\n\n::: {#f5135470 .cell execution_count=129}\n``` {.python .cell-code}\nall_caps.count(\"O\")\n```\n\n::: {.cell-output .cell-output-display execution_count=129}\n```\n3\n```\n:::\n:::\n\n\nOne can explicitly cast a string to a list:\n\n::: {#d0675bcc .cell execution_count=130}\n``` {.python .cell-code}\ncaps_list = list(all_caps)\ncaps_list\n```\n\n::: {.cell-output .cell-output-display execution_count=130}\n```\n['H',\n 'O',\n 'W',\n ' ',\n 'A',\n 'R',\n 'E',\n ' ',\n 'Y',\n 'O',\n 'U',\n ' ',\n 'T',\n 'O',\n 'D',\n 'A',\n 'Y',\n '?']\n```\n:::\n:::\n\n\n::: {#4e67aaa8 .cell execution_count=131}\n``` {.python .cell-code}\nlen(all_caps)\n```\n\n::: {.cell-output .cell-output-display execution_count=131}\n```\n18\n```\n:::\n:::\n\n\n::: {#40feec5d .cell execution_count=132}\n``` {.python .cell-code}\nlen(caps_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=132}\n```\n18\n```\n:::\n:::\n\n\n#### String formatting\n\n-   Python has a really awesome way of formatting strings by \"filling in the blanks\" and formatting them nicely.\n-   There are a few ways of doing this, but [f-strings](https://realpython.com/python-f-strings/) are what I would recommend.\n\n::: {#1a6a2fef .cell execution_count=133}\n``` {.python .cell-code}\nmyname = \"Firas\"\nage = 5\n\nnew = f\"Hello, my name is {myname}. I am {age} years old.\"\n\nprint(new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, my name is Firas. I am 5 years old.\n```\n:::\n:::\n\n\n#### Empties\n\n::: {#a4ae61be .cell execution_count=134}\n``` {.python .cell-code}\nlst = list() # empty list\nlst\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\n[]\n```\n:::\n:::\n\n\n::: {#1128b613 .cell execution_count=135}\n``` {.python .cell-code}\nlst = [] # empty list\nlst\n```\n\n::: {.cell-output .cell-output-display execution_count=135}\n```\n[]\n```\n:::\n:::\n\n\n::: {#6402349b .cell execution_count=136}\n``` {.python .cell-code}\ntup = tuple() # empty tuple\ntup\n```\n\n::: {.cell-output .cell-output-display execution_count=136}\n```\n()\n```\n:::\n:::\n\n\n::: {#7f770b9c .cell execution_count=137}\n``` {.python .cell-code}\ntup = () # empty tuple\ntup\n```\n\n::: {.cell-output .cell-output-display execution_count=137}\n```\n()\n```\n:::\n:::\n\n\n::: {#86f1bc0e .cell execution_count=138}\n``` {.python .cell-code}\ndic = dict() # empty dict\ndic\n```\n\n::: {.cell-output .cell-output-display execution_count=138}\n```\n{}\n```\n:::\n:::\n\n\n::: {#74e3dd46 .cell execution_count=139}\n``` {.python .cell-code}\ndic = {} # empty dict\ndic\n```\n\n::: {.cell-output .cell-output-display execution_count=139}\n```\n{}\n```\n:::\n:::\n\n\n::: {#6df725b0 .cell execution_count=140}\n``` {.python .cell-code}\nst = set() # emtpy set\nst\n```\n\n::: {.cell-output .cell-output-display execution_count=140}\n```\nset()\n```\n:::\n:::\n\n\n::: {#96e939ce .cell execution_count=141}\n``` {.python .cell-code}\nst = {} # NOT an empty set!\ntype(st)\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```\ndict\n```\n:::\n:::\n\n\n::: {#2cf53ec7 .cell execution_count=142}\n``` {.python .cell-code}\nst = {1}\ntype(st)\n```\n\n::: {.cell-output .cell-output-display execution_count=142}\n```\nset\n```\n:::\n:::\n\n\n## Conditionals (10 min)\n\n-   [Conditional statements](https://docs.python.org/3/tutorial/controlflow.html) allow us to write programs where only certain blocks of code are executed depending on the state of the program.\n-   Let's look at some examples and take note of the keywords, syntax and indentation.\n-   Check out the [Python documentation](https://docs.python.org/3/tutorial/controlflow.html) and [Think Python (Chapter 5)](http://greenteapress.com/thinkpython/html/thinkpython006.html) for more information about conditional execution.\n\n::: {#305124f7 .cell execution_count=143}\n``` {.python .cell-code}\nname = input(\"What's your name?\")\n\nif name.lower() == 'mike':\n    print(\"That's my name too!\")\nelif name.lower() == 'santa':\n    print(\"That's a funny name.\")\nelif name.lower() == 'firas':\n    print(\"That's a great name\")\nelse:\n    print(f\"Hello {name}! That's a cool name.\")\n\n    print('Nice to meet you!')\n```\n:::\n\n\nThe main points to notice:\n\n-   Use keywords `if`, `elif` and `else`\n-   The colon `:` ends each conditional expression\n-   Indentation (by 4 empty space) defines code blocks\n-   In an `if` statement, the first block whose conditional statement returns `True` is executed and the program exits the `if` block\n-   `if` statements don't necessarily need `elif` or `else`\n-   `elif` lets us check several conditions\n-   `else` lets us evaluate a default block if all other conditions are `False`\n-   the end of the entire `if` statement is where the indentation returns to the same level as the first `if` keyword\n\nIf statements can also be **nested** inside of one another:\n\n::: {#3fa871fd .cell execution_count=144}\n``` {.python .cell-code}\nname = input(\"What's your name?\")\n\nif name.lower() == 'mike':\n    print(\"That's my name too!\")\nelif name.lower() == 'santa':\n    print(\"That's a funny name.\")\nelse:\n    print(\"Hello {0}! That's a cool name.\".format(name))\n    if name.lower().startswith(\"super\"):\n        print(\"Do you have superpowers?\")\n\nprint('Nice to meet you!')\n```\n:::\n\n\n#### Inline if/else\n\n::: {#65100e47 .cell execution_count=145}\n``` {.python .cell-code}\nwords = [\"the\", \"list\", \"of\", \"words\"]\n\nx = \"long list\" if len(words) > 10 else \"short list\"\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=143}\n```\n'short list'\n```\n:::\n:::\n\n\n::: {#aadeb3ad .cell execution_count=146}\n``` {.python .cell-code}\nif len(words) > 10:\n    x = \"long list\"\nelse:\n    x = \"short list\"\n```\n:::\n\n\n::: {#3ee54618 .cell execution_count=147}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=145}\n```\n'short list'\n```\n:::\n:::\n\n\n## Preview: Next Class\n\nNext class we will look at loops, functions, and error handling.\nAfter that, we'll be in business for the rest of the course!\n\n",
    "supporting": [
      "03_python-1_files"
    ],
    "filters": [],
    "includes": {}
  }
}