{
  "hash": "2bbb5af76618a8be72cbf71fd0d0e88d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"{{< var icon.computer-activity >}} Review of Programming in Python II\"\njupyter: python3\n---\n\nThe material for this lecture is best experienced as a Jupyter Notebook.\nGo to PrairieLearn [Class Activity 2B]({{< var course.prairielearn >}}/assessment/2495513) and open the workspace in the question there to get access to a cloud-based version of this notebook.\n\n## Lecture Outline\n\n-   Comments (0 min)\n-   Loops\n-   Comprehensions\n-   Break (5 min)\n-   Functions\n-   Exceptions\n-   Testing\n-   Questions and Recap\n\n### Attribution\n\n-   The original version of these Python lectures were by [Patrick Walls](https://www.math.ubc.ca/~pwalls/).\n-   These lectures were originally delivered by [Mike Gelbart](https://mikegelbart.com) and are [available publicly here](https://www.youtube.com/watch?v=7FLv1ACEl-E&list=PLWmXHcz_53Q26aQzhknaT3zwWvl7w8wQE&index=2).\n\n## Comments in python\n\n::: {#d3955220 .cell execution_count=1}\n``` {.python .cell-code}\nx = 1 # 5 + 5 this is a comment\n```\n:::\n\n\n::: {#f875a4c9 .cell execution_count=2}\n``` {.python .cell-code}\n# \"\"\"\n# this is a string, which does nothing\n# and can be used as a comment\n# \"\"\"\n\n7\n\n\nx = 1\n```\n:::\n\n\n## Loops\n\n-   Loops allow us to execute a block of code multiple times.\n-   We will focus on [`for` loops](https://docs.python.org/3/tutorial/controlflow.html#for-statements)\n\n::: {#03e8ef41 .cell execution_count=3}\n``` {.python .cell-code}\n\"I have 5 apples\"\n\"I have 6 apples\"\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'I have 6 apples'\n```\n:::\n:::\n\n\n### `for` loops\n\n::: {#ae6e45c1 .cell execution_count=4}\n``` {.python .cell-code}\nfor n in [2, 7, -1, 5]:\n    print(\"The number is\", n, \"its square is\", n**2)\n    if n > 2:\n        print(\"hallelujah\")\n    # this is inside the loop\n# this is outside the loop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe number is 2 its square is 4\nThe number is 7 its square is 49\nhallelujah\nThe number is -1 its square is 1\nThe number is 5 its square is 25\nhallelujah\n```\n:::\n:::\n\n\n::: {#2e01d595 .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nnp.arange(0,100,2)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,\n       34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66,\n       68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98])\n```\n:::\n:::\n\n\nThe main points to notice:\n\n-   Keyword `for` begins the loop\n-   Colon `:` ends the first line of the loop\n-   We can iterate over any kind of iterable: list, tuple, range, string. In this case, we are iterating over the values in a list\n-   Block of code indented is executed for each value in the list (hence the name \"for\" loops, sometimes also called \"for each\" loops)\n-   The loop ends after the variable `n` has taken all the values in the list\n\n::: {#0f1510f5 .cell execution_count=6}\n``` {.python .cell-code}\n\"abc\" + \"def\"\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'abcdef'\n```\n:::\n:::\n\n\n::: {#28839bd2 .cell execution_count=7}\n``` {.python .cell-code}\nword = \"Python\"\nfor letter in word:\n    print(\"Gimme a \" + letter + \"!\")\n\nprint(\"\\tWhat's that spell?!! \" + word + \"!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGimme a P!\nGimme a y!\nGimme a t!\nGimme a h!\nGimme a o!\nGimme a n!\n\tWhat's that spell?!! Python!\n```\n:::\n:::\n\n\n-   A very common pattern is to use `for` with `range`.\n-   `range` gives you a sequence of integers up to some value.\n\n::: {#353651f5 .cell execution_count=8}\n``` {.python .cell-code}\nfor i in range(10):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\nWe can also specify a start value and a skip-by value with `range`:\n\n::: {#2a2d0991 .cell execution_count=9}\n``` {.python .cell-code}\nfor i in range(1,101,10):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n11\n21\n31\n41\n51\n61\n71\n81\n91\n```\n:::\n:::\n\n\nWe can write a loop inside another loop to iterate over multiple dimensions of data.\nConsider the following loop as enumerating the coordinates in a 3 by 3 grid of points.\n\n::: {#cb69c0cc .cell execution_count=10}\n``` {.python .cell-code}\nfor x in [1,2,3]:\n    for y in [\"a\",\"b\",\"c\"]:\n        print((x,y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 'a')\n(1, 'b')\n(1, 'c')\n(2, 'a')\n(2, 'b')\n(2, 'c')\n(3, 'a')\n(3, 'b')\n(3, 'c')\n```\n:::\n:::\n\n\n::: {#547000e9 .cell execution_count=11}\n``` {.python .cell-code}\nlist_1 = [1,2,3,4,5]\nlist_2 = [\"a\",\"b\",\"c\",\"d\"]\nfor i in range(5):\n    print(list_1[i], list_2[i])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 a\n2 b\n3 c\n4 d\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> list_2 <span style=\"color:rgb(98,98,98)\">=</span> [<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">a</span><span style=\"color:rgb(175,0,0)\">\"</span>,<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span>,<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">c</span><span style=\"color:rgb(175,0,0)\">\"</span>,<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">d</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">5</span>):\n<span class=\"ansi-green-fg\">----&gt; 4</span>     <span style=\"color:rgb(0,135,0)\">print</span>(list_1[i], <span class=\"ansi-yellow-bg\">list_2</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-bg\">i</span><span class=\"ansi-yellow-bg\">]</span>)\n\n<span class=\"ansi-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#98ffc9aa .cell execution_count=12}\n``` {.python .cell-code}\nfor i,j in zip(list_1,list_2):\n    print(i,j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 a\n2 b\n3 c\n4 d\n```\n:::\n:::\n\n\nWe can loop through key-value pairs of a dictionary using `.items()`:\n\n::: {#2c50d668 .cell execution_count=13}\n``` {.python .cell-code}\nprint(\"Hello\\\\nWorld\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\\nWorld\n```\n:::\n:::\n\n\n::: {#a3e7c5dd .cell execution_count=14}\n``` {.python .cell-code}\nh = \"\"\"Hello \\\\n\nWorld\"\"\"\n\nprint(h)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello \\n\nWorld\n```\n:::\n:::\n\n\n::: {#dd06ffe3 .cell execution_count=15}\n``` {.python .cell-code}\ncourses = {521 : \"awesome\",\n           551 : \"riveting\",\n           511 : \"naptime!\"}\n\nfor course_num, description in courses.items():\n    print(\"DSCI\", course_num, \"is\", description)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDSCI 521 is awesome\nDSCI 551 is riveting\nDSCI 511 is naptime!\n```\n:::\n:::\n\n\n::: {#6f8234d2 .cell execution_count=16}\n``` {.python .cell-code}\nfor course_num,course_desc in courses.items():\n    print(course_num, course_desc)\n#    print(course_num, courses[course_num])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n521 awesome\n551 riveting\n511 naptime!\n```\n:::\n:::\n\n\nAbove: the general syntax is `for key, value in dictionary.items():`\n\n### `while` loops\n\n-   We can also use a [`while` loop](https://docs.python.org/3/reference/compound_stmts.html#while) to excute a block of code several times.\n-   In reality, I rarely use these.\n-   Beware! If the conditional expression is always `True`, then you've got an infintite loop!\n    -   (Use the \"Stop\" button in the toolbar above, or Ctrl-C in the terminal, to kill the program if you get an infinite loop.)\n\n::: {#30397575 .cell execution_count=17}\n``` {.python .cell-code}\nn = 10\nwhile n > 0:\n    print(n)\n    n = n - 1\n\nprint(\"Blast off!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\nBlast off!\n```\n:::\n:::\n\n\n## Comprehensions\n\nComprehensions allow us to build lists/sets/dictionaries in one convenient, compact line of code.\n\n### List Comprehensions\n\nList comprehensions are one of my favourite features of Python!\n\n::: {#3ce8359f .cell execution_count=18}\n``` {.python .cell-code}\n[hh*10 for hh in range(10)]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n```\n:::\n:::\n\n\n::: {#3af499ef .cell execution_count=19}\n``` {.python .cell-code}\nwords = [\"hello\", \"goodbye\", \"the\", \"antidisestablishmentarianism\"]\n\ny = [word[-3:] for word in words]  # list comprehension\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n['llo', 'bye', 'the', 'ism']\n```\n:::\n:::\n\n\n::: {#e26491a4 .cell execution_count=20}\n``` {.python .cell-code}\nfor word in words:\n    print(word[-3:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nllo\nbye\nthe\nism\n```\n:::\n:::\n\n\n::: {#396dd570 .cell execution_count=21}\n``` {.python .cell-code}\ny = list()\nfor word in words:\n    y.append(word[-3:])\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n['llo', 'bye', 'the', 'ism']\n```\n:::\n:::\n\n\n### Dictionary comprehension\n\n::: {#0e1974b2 .cell execution_count=22}\n``` {.python .cell-code}\nword_lengths = {word : len(word) for word in words} # dictionary comprehension\nword_lengths\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n{'hello': 5, 'goodbye': 7, 'the': 3, 'antidisestablishmentarianism': 28}\n```\n:::\n:::\n\n\n::: {#5045d5e8 .cell execution_count=23}\n``` {.python .cell-code}\nword_upper = {word : word.upper() for word in words}\nword_upper\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n{'hello': 'HELLO',\n 'goodbye': 'GOODBYE',\n 'the': 'THE',\n 'antidisestablishmentarianism': 'ANTIDISESTABLISHMENTARIANISM'}\n```\n:::\n:::\n\n\n### Set Comprehensions\n\n::: {#ebb13be0 .cell execution_count=24}\n``` {.python .cell-code}\ny = {word[-1] for word in words}  # set comprehension\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'m', 'o', 'e'}\n```\n:::\n:::\n\n\n### Tuple Comprehensions\n\nTuple comprehensions actually don't exist!\nBut, you can use generators.\n\nSee [this StackOverflow post](https://stackoverflow.com/questions/16940293/why-is-there-no-tuple-comprehension-in-python) for (some fun) details!\n\n## Break (5 min)\n\n## Functions\n\n-   Define a [**function**](https://docs.python.org/3/tutorial/controlflow.html#defining-functions) to re-use a block of code with different input parameters, also known as **arguments**.\n-   For example, define a function called `square` which takes one input parameter `n` and returns the square `n**2`.\n\n::: {#e7c873ec .cell execution_count=25}\n``` {.python .cell-code}\ndef square(n):\n    n_squared = n**2\n    return n_squared\n\n# quick test:\nassert square(2) ==4\n```\n:::\n\n\n::: {#067ccf99 .cell execution_count=26}\n``` {.python .cell-code}\nsquare(12345)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n152399025\n```\n:::\n:::\n\n\n::: {#0b661a85 .cell execution_count=27}\n``` {.python .cell-code}\nsquare(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n4\n```\n:::\n:::\n\n\n::: {#b373b77c .cell execution_count=28}\n``` {.python .cell-code}\nsquare(100)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n10000\n```\n:::\n:::\n\n\n::: {#2edd8bea .cell execution_count=29}\n``` {.python .cell-code}\n# this will fail \n# square('hello')\n```\n:::\n\n\n-   Begins with `def` keyword, function name, input parameters and then colon (`:`)\n-   Function block defined by indentation\n-   Output or \"return\" value of the function is given by the `return` keyword\n\n### Side effects\n\n-   If a function changes the variables passed into it, then it is said to have **side effects**\n-   Example:\n\n::: {#7b0ff948 .cell execution_count=30}\n``` {.python .cell-code}\ndef silly_sum(sri):\n    sri.append(0)\n    return sum(sri)\n```\n:::\n\n\n::: {#74069920 .cell execution_count=31}\n``` {.python .cell-code}\nsilly_sum([1,2,3,4])\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n10\n```\n:::\n:::\n\n\nLooks good, like it sums the numbers?\nBut wait...\n\n::: {#43710c9c .cell execution_count=32}\n``` {.python .cell-code}\nlst = [1,2,3,4]\nsilly_sum(lst)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n10\n```\n:::\n:::\n\n\n::: {#581ad689 .cell execution_count=33}\n``` {.python .cell-code}\nsilly_sum(lst)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n10\n```\n:::\n:::\n\n\n::: {#802c60e7 .cell execution_count=34}\n``` {.python .cell-code}\nlst\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n[1, 2, 3, 4, 0, 0]\n```\n:::\n:::\n\n\n-   If your function has side effects like this, you must mention it in the documentation (later today).\n-   More on how this works next class.\n\n### Null return type\n\nIf you do not specify a return value, the function returns `None` when it terminates:\n\n::: {#4f8fe539 .cell execution_count=35}\n``` {.python .cell-code}\ndef f(x):\n    x + 1 # no return!\n    if x == 999:\n        return\n    else:\n        return('hello')\nprint(f(998))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\n```\n:::\n:::\n\n\n### Designing good functions - DRY principle (15 min)\n\n-   DRY: **Don't Repeat Yourself**\n-   See [Wikipedia article](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n-   Consider the task of, for each element of a list, turning it into a palindrome\n    -   e.g. \"mike\" --\\> \"mikeekim\"\n\n::: {#5af9eaa9 .cell execution_count=36}\n``` {.python .cell-code}\nnames = [\"milad\", \"rodolfo\", \"tiffany\", \"khalad\", \"jeff\", \"christel\",\"firas\"]\n```\n:::\n\n\n::: {#b9d4f566 .cell execution_count=37}\n``` {.python .cell-code}\nname = \"mike\"\nname[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n'ekim'\n```\n:::\n:::\n\n\n::: {#c49edf60 .cell execution_count=38}\n``` {.python .cell-code}\nnames_backwards = list()\n\nnames_backwards.append(names[0] + names[0][::-1])\nnames_backwards.append(names[1] + names[1][::-1])\nnames_backwards.append(names[2] + names[2][::-1])\nnames_backwards.append(names[3] + names[3][::-1])\nnames_backwards.append(names[4] + names[4][::-1])\nnames_backwards.append(names[5] + names[5][::-1])\nnames_backwards.append(names[6] + names[6][::-1])\n\n\nnames_backwards\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n['miladdalim',\n 'rodolfooflodor',\n 'tiffanyynaffit',\n 'khaladdalahk',\n 'jeffffej',\n 'christelletsirhc',\n 'firassarif']\n```\n:::\n:::\n\n\n-   Above: this is gross, terrible, yucky code\n    1.  It only works for a list with 3 elements\n    2.  It only works for a list named `names`\n    3.  If we want to change its functionality, we need to change 3 similar lines of code (Don't Repeat Yourself!!)\n    4.  It is hard to understand what it does just by looking at it\n\n::: {#8bdbc410 .cell execution_count=39}\n``` {.python .cell-code}\nnames_backwards = list()\n\nfor name in names:\n    names_backwards.append(name + name[::-1])\n    \nnames_backwards\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n['miladdalim',\n 'rodolfooflodor',\n 'tiffanyynaffit',\n 'khaladdalahk',\n 'jeffffej',\n 'christelletsirhc',\n 'firassarif']\n```\n:::\n:::\n\n\nAbove: this is slightly better.\nWe have solved problems (1) and (3).\n\n::: {#addb96b2 .cell execution_count=40}\n``` {.python .cell-code}\ndef make_palindromes(names):\n    names_backwards = list()\n    \n    for name in names:\n        names_backwards.append(name + name[::-1])\n    \n    return names_backwards\n```\n:::\n\n\n::: {#74cd6e9f .cell execution_count=41}\n``` {.python .cell-code}\np_name = make_palindromes(names)\n```\n:::\n\n\n::: {#5c5a637d .cell execution_count=42}\n``` {.python .cell-code}\nfor p in p_name:\n    print(p.upper())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMILADDALIM\nRODOLFOOFLODOR\nTIFFANYYNAFFIT\nKHALADDALAHK\nJEFFFFEJ\nCHRISTELLETSIRHC\nFIRASSARIF\n```\n:::\n:::\n\n\n-   Above: this is even better. We have now also solved problem (2), because you can call the function with any list, not just `names`.\n-   For example, what if we had multiple *lists*:\n\n::: {#38f5e236 .cell execution_count=43}\n``` {.python .cell-code}\nnames1 = [\"milad\", \"rodolfo\", \"tiffany\"]\nnames2 = [\"Trudeau\", \"Scheer\", \"Singh\", \"Blanchet\", \"May\"]\nnames3 = [\"apple\", \"orange\", \"banana\"]\n```\n:::\n\n\n::: {#6987f28d .cell execution_count=44}\n``` {.python .cell-code}\nnames_backwards_1 = list()\n\nfor name in names1:\n    names_backwards_1.append(name + name[::-1])\n    \nnames_backwards_1\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n['miladdalim', 'rodolfooflodor', 'tiffanyynaffit']\n```\n:::\n:::\n\n\n::: {#66bb11c2 .cell execution_count=45}\n``` {.python .cell-code}\nnames_backwards_2 = list()\n\nfor name in names2:\n    names_backwards_2.append(name + name[::-1])\n    \nnames_backwards_2\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n['TrudeauuaedurT', 'ScheerreehcS', 'SinghhgniS', 'BlanchettehcnalB', 'MayyaM']\n```\n:::\n:::\n\n\n::: {#0c2ca3d8 .cell execution_count=46}\n``` {.python .cell-code}\nnames_backwards_3 = list()\n\nfor name in names3:\n    names_backwards_3.append(name + name[::-1])\n    \nnames_backwards_3\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n['appleelppa', 'orangeegnaro', 'bananaananab']\n```\n:::\n:::\n\n\nAbove: this is very bad also (and imagine if it was 20 lines of code instead of 2).\nThis was problem (2).\nOur function makes it much better:\n\n::: {#7e638860 .cell execution_count=47}\n``` {.python .cell-code}\nmake_palindromes(names1)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n['miladdalim', 'rodolfooflodor', 'tiffanyynaffit']\n```\n:::\n:::\n\n\n::: {#81275a2f .cell execution_count=48}\n``` {.python .cell-code}\nmake_palindromes(names2)\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n['TrudeauuaedurT', 'ScheerreehcS', 'SinghhgniS', 'BlanchettehcnalB', 'MayyaM']\n```\n:::\n:::\n\n\n::: {#2a918d52 .cell execution_count=49}\n``` {.python .cell-code}\nmake_palindromes(names3)\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n['appleelppa', 'orangeegnaro', 'bananaananab']\n```\n:::\n:::\n\n\n-   You could get even more fancy, and put the lists of names into a list (so you have a list of lists).\n-   Then you could loop over the list and call the function each time:\n\n::: {#c1b67b7d .cell execution_count=50}\n``` {.python .cell-code}\nfor list_of_names in [names1, names2, names3]:\n    print(make_palindromes(list_of_names))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['miladdalim', 'rodolfooflodor', 'tiffanyynaffit']\n['TrudeauuaedurT', 'ScheerreehcS', 'SinghhgniS', 'BlanchettehcnalB', 'MayyaM']\n['appleelppa', 'orangeegnaro', 'bananaananab']\n```\n:::\n:::\n\n\n### Designing good functions\n\n-   How far you go with this is sort of a matter of personal style, and how you choose to apply the DRY principle: DON'T REPEAT YOURSELF!\n-   These decisions are often ambiguous. For example:\n    -   Should `make_palindromes` be a function if I'm only ever doing it once? Twice?\n    -   Should the loop be inside the function, or outside?\n    -   Or should there be TWO functions, one that loops over the other??\n-   In my personal opinion, `make_palindromes` does a bit too much to be understandable.\n-   I prefer this:\n\n::: {#b1ac2a15 .cell execution_count=51}\n``` {.python .cell-code}\ndef make_palindrome(name):\n    return name + name[::-1]\n\nmake_palindrome(\"milad\")\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n'miladdalim'\n```\n:::\n:::\n\n\n-   From here, we want to \"apply `make_palindrome` to every element of a list\"\n-   It turns out this is an extremely common desire, so Python has built-in functions.\n-   One of these is `map`, which we'll cover later. But for now, just a comprehension will do:\n\n::: {#cfd88051 .cell execution_count=52}\n``` {.python .cell-code}\n[make_palindrome(name) for name in names]\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n['miladdalim',\n 'rodolfooflodor',\n 'tiffanyynaffit',\n 'khaladdalahk',\n 'jeffffej',\n 'christelletsirhc',\n 'firassarif']\n```\n:::\n:::\n\n\nOther function design considerations:\n\n-   Should we print output or produce plots inside or outside functions?\n    -   I would usually say outside, because this is a \"side effect\" of sorts\n-   Should the function do one thing or many things?\n    -   This is a tough one, hard to answer in general\n\n### Optional & keyword arguments\n\n-   Sometimes it is convenient to have *default values* for some arguments in a function.\n-   Because they have default values, these arguments are optional, hence \"optional arguments\"\n-   Example:\n\n::: {#8bffb1f8 .cell execution_count=53}\n``` {.python .cell-code}\ndef repeat_string(s, n=2):\n    return s*n\n```\n:::\n\n\n::: {#03a946e5 .cell execution_count=54}\n``` {.python .cell-code}\nrepeat_string(\"mds\", 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n'mdsmds'\n```\n:::\n:::\n\n\n::: {#c6e8c2d1 .cell execution_count=55}\n``` {.python .cell-code}\nrepeat_string(\"mds\", 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n'mdsmdsmdsmdsmds'\n```\n:::\n:::\n\n\nSane defaults:\n\n-   Ideally, the default should be carefully chosen.\n-   Here, the idea of \"repeating\" something makes me think of having 2 copies, so `n=2` feels like a sane default.\n\nSyntax:\n\n-   You can have any number of arguments and any number of optional arguments\n-   \\*\\*All the optional arguments must come after the regular arguments\n-   The regular arguments are mapped by the order they appear\n-   The optional arguments can be specified out of order\n\n::: {#06109487 .cell execution_count=56}\n``` {.python .cell-code}\ndef example(a, b, c=\"DEFAULT\", d=\"DEFAULT\"):\n    print(a,b,c,d)\n    \nexample(1,2,3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4\n```\n:::\n:::\n\n\nUsing the defaults for `c` and `d`:\n\n::: {#f507c77d .cell execution_count=57}\n``` {.python .cell-code}\nexample(1,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 DEFAULT DEFAULT\n```\n:::\n:::\n\n\nSpecifying `c` and `d` as **keyword arguments** (i.e. by name):\n\n::: {#8809b901 .cell execution_count=58}\n``` {.python .cell-code}\nexample(1,2,c=3,d=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4\n```\n:::\n:::\n\n\nSpecifying only one of the optional arguments, by keyword:\n\n::: {#f2f52df7 .cell execution_count=59}\n``` {.python .cell-code}\nexample(1,2,c=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 DEFAULT\n```\n:::\n:::\n\n\nOr the other:\n\n::: {#cf8b3b45 .cell execution_count=60}\n``` {.python .cell-code}\nexample(1,2,d=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 DEFAULT 4\n```\n:::\n:::\n\n\nSpecifying all the arguments as keyword arguments, even though only `c` and `d` are optional:\n\n::: {#0aa4f0ce .cell execution_count=61}\n``` {.python .cell-code}\nexample(a=1,b=2,c=3,d=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4\n```\n:::\n:::\n\n\nSpecifying `c` by the fact that it comes 3rd (I do not recommend this because I find it is confusing):\n\n::: {#47d68fce .cell execution_count=62}\n``` {.python .cell-code}\nexample(1,2,3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 DEFAULT\n```\n:::\n:::\n\n\nSpecifying the optional arguments by keyword, but in the wrong order (this is also somewhat confusing, but not so terrible - I am OK with it):\n\n::: {#d546a8c9 .cell execution_count=63}\n``` {.python .cell-code}\nexample(1,2,d=4,c=3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4\n```\n:::\n:::\n\n\nSpecifying the non-optional arguments by keyword (I am fine with this):\n\n::: {#35cea6ce .cell execution_count=64}\n``` {.python .cell-code}\nexample(a=1,b=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 DEFAULT DEFAULT\n```\n:::\n:::\n\n\nSpecifying the non-optional arguments by keyword, but in the wrong order (not recommended, I find it confusing):\n\n::: {#75c078c8 .cell execution_count=65}\n``` {.python .cell-code}\nexample(b=2,a=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 DEFAULT DEFAULT\n```\n:::\n:::\n\n\nSpecifying keyword arguments before non-keyword arguments (this throws an error):\n\n::: {#1812bc61 .cell execution_count=66}\n``` {.python .cell-code}\nexample(a=2,b=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 1 DEFAULT DEFAULT\n```\n:::\n:::\n\n\n-   In general, I am used to calling non-optional arguments by order, and optional arguments by keyword.\n-   The language allows us to deviate from this, but it can be unnecessarily confusing sometimes.\n\n### `kwargs`:\n\n-   You can also call/define functions with `*args` and `**kwargs`; see, e.g. [here](https://realpython.com/python-kwargs-and-args/)\n-   Do not instantiate objects in the function definition - see [here](https://docs.python-guide.org/writing/gotchas/) under \"Mutable Default Arguments\"\n\n::: {#b428452c .cell execution_count=67}\n``` {.python .cell-code}\ndef example(a, b=[]): # don't do this!\n    return 0\n```\n:::\n\n\n::: {#9202c196 .cell execution_count=68}\n``` {.python .cell-code}\ndef example(a, b=None): # insted, do this\n    if b is None:\n        b = []\n    return 0\n```\n:::\n\n\n### Anonymous functions (5 min)\n\nThere are two ways to define functions in Python:\n\n::: {#20493c84 .cell execution_count=69}\n``` {.python .cell-code}\ndef add_one(x):\n    return x+1\n```\n:::\n\n\n::: {#531b4694 .cell execution_count=70}\n``` {.python .cell-code}\nadd_one(7.2)\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n8.2\n```\n:::\n:::\n\n\n::: {#8cd64a0f .cell execution_count=71}\n``` {.python .cell-code}\nadd_one = lambda x: x+1 \n```\n:::\n\n\n::: {#d715135a .cell execution_count=72}\n``` {.python .cell-code}\ntype(add_one)\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\nfunction\n```\n:::\n:::\n\n\n::: {#eff44a9a .cell execution_count=73}\n``` {.python .cell-code}\nadd_one(7.2)\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n8.2\n```\n:::\n:::\n\n\nThe two approaches above are identical.\nThe one with `lambda` is called an **anonymous function**.\n\nSome differences:\n\n-   anonymous functions can only take up one line of code, so they aren't appropriate in most cases.\n-   anonymous functions evaluate to a function (remember, functions are first-class objects) immediate, so we can do weird stuff with them.\n\n::: {#4b055b0e .cell execution_count=74}\n``` {.python .cell-code}\n(lambda x,y: x+y)(6,7)\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n13\n```\n:::\n:::\n\n\n::: {#da244156 .cell execution_count=75}\n``` {.python .cell-code}\nevaluate_function_on_x_plus_1(lambda x: x**2, 5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[75], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">evaluate_function_on_x_plus_1</span>(<span style=\"font-weight:bold;color:rgb(0,135,0)\">lambda</span> x: x<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">2</span>, <span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'evaluate_function_on_x_plus_1' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAbove:\n\n-   First, `lambda x: x**2` evaluates to a value of type `function`\n    -   Notice that this function is never given a name - hence \"anonymous functions\" !\n-   Then, the function and the integer `5` are passed into `evaluate_function_on_x_plus_1`\n-   At which point the anonymous function is evaluated on `5+1`, and we get `36`.\n\n## Exceptions, `try`/`except` (10 min)\n\n-   If something goes wrong, we don't want the code to crash - we want it to **fail gracefully**.\n-   In Python, this can be accomplished using `try`/`except`:\n-   Here is a basic example:\n\n::: {#eb8892bf .cell execution_count=76}\n``` {.python .cell-code}\nthis_variable_does_not_exist\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[76], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">this_variable_does_not_exist</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'this_variable_does_not_exist' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#10641281 .cell execution_count=77}\n``` {.python .cell-code}\ntry:\n    this_variable_does_not_exist\nexcept:\n#     pass\n    print(\"You did something bad!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou did something bad!\n```\n:::\n:::\n\n\n-   Python tries to execute the code in the `try` block.\n-   If an error is encountered, we \"catch\" this in the `except` block (also called `try`/`catch` in other languages).\n-   There are many different error types, or **exceptions** - we saw `NameError` above.\n\n::: {#e3775ecd .cell execution_count=78}\n``` {.python .cell-code}\n5/0\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ZeroDivisionError</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[78], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">/</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span>\n\n<span class=\"ansi-red-fg\">ZeroDivisionError</span>: division by zero</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e12d9798 .cell execution_count=79}\n``` {.python .cell-code}\nmy_list = [1,2,3]\nmy_list[5]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[79], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> my_list <span style=\"color:rgb(98,98,98)\">=</span> [<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">3</span>]\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">my_list</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#308520f0 .cell execution_count=80}\n``` {.python .cell-code}\n# (note: this is also valid syntax, just very confusing)\n[1,2,3][5]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[80], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># (note: this is also valid syntax, just very confusing)</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">,</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">,</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5dd802cb .cell execution_count=81}\n``` {.python .cell-code}\nmy_tuple = (1,2,3)\nmy_tuple[0] = 0\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[81], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> my_tuple <span style=\"color:rgb(98,98,98)\">=</span> (<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">3</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> my_tuple[<span style=\"color:rgb(98,98,98)\">0</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n-   Ok, so there are apparently a bunch of different errors one could run into.\n-   With `try`/`except` you can also catch the exception itself:\n\n::: {#59eb1d21 .cell execution_count=82}\n``` {.python .cell-code}\ntry:\n    this_variable_does_not_exist\nexcept Exception as ex:\n    print(\"You did something bad!\")\n    print(ex)\n    print(type(ex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou did something bad!\nname 'this_variable_does_not_exist' is not defined\n<class 'NameError'>\n```\n:::\n:::\n\n\n-   In the above, we caught the exception and assigned it to the variable `ex` so that we could print it out.\n\n-   This is useful because you can see what the error message would have been, without crashing your program.\n\n-   You can also catch specific exceptions types, like so:\n\n::: {#ff21618a .cell execution_count=83}\n``` {.python .cell-code}\ntry:\n    this_variable_does_not_exist\nexcept TypeError:\n    print(\"You made a type error!\")\nexcept NameError:\n    print(\"You made a name error!\")\nexcept:\n    print(\"You made some other sort of error\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou made a name error!\n```\n:::\n:::\n\n\n-   The final `except` would trigger if the error is none of the above types, so this sort of has an `if`/`elif`/`else` feel to it.\n-   There are some extra features, in particular an `else` and `finally` block; if you are interested, see e.g., [here](https://www.w3schools.com/python/python_try_except.asp).\n\n::: {#97908653 .cell execution_count=84}\n``` {.python .cell-code}\ntry:\n    5/0\nexcept TypeError:\n    print(\"You made a type error!\")\nexcept NameError:\n    print(\"You made a name error!\")\nexcept Exception as ex:\n    print(\"You made some other sort of error\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou made some other sort of error\n```\n:::\n:::\n\n\n-   Ideally, try to make your `try`/`except` blocks specific, and try not to put more errors inside the `except`...\n\n::: {#a4d62bbf .cell execution_count=85}\n``` {.python .cell-code}\ntry:\n    this_variable_does_not_exist\nexcept:\n    5/0\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[85], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">this_variable_does_not_exist</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span>:\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'this_variable_does_not_exist' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">ZeroDivisionError</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[85], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     this_variable_does_not_exist\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span>:\n<span class=\"ansi-green-fg\">----&gt; 4</span>     <span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">/</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span>\n\n<span class=\"ansi-red-fg\">ZeroDivisionError</span>: division by zero</pre>\n```\n:::\n\n:::\n:::\n\n\n-   This is a bit much, but it does happen sometimes :(\n\n### Using `raise`\n\n-   You can also write code that raises an exception on purpose, using `raise`\n\n::: {#f66b6864 .cell execution_count=86}\n``` {.python .cell-code}\ndef add_one(x):\n    return x+1\n```\n:::\n\n\n::: {#90304aac .cell execution_count=87}\n``` {.python .cell-code}\nadd_one(\"blah\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[87], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">add_one</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">blah</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[86], line 2</span>, in <span class=\"ansi-cyan-fg\">add_one</span><span class=\"ansi-blue-fg\">(x)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">add_one</span>(x):\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">x</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">+</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bc7a866c .cell execution_count=88}\n``` {.python .cell-code}\ndef add_one(x):\n    if not isinstance(x, float) and not isinstance(x, int):\n        raise Exception(\"Sorry, x must be numeric\")\n        \n    return x+1\n```\n:::\n\n\n::: {#76a21833 .cell execution_count=89}\n``` {.python .cell-code}\nadd_one(\"blah\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Exception</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[89], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">add_one</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">blah</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg\">In[88], line 3</span>, in <span class=\"ansi-cyan-fg\">add_one</span><span class=\"ansi-blue-fg\">(x)</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">add_one</span>(x):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(x, <span style=\"color:rgb(0,135,0)\">float</span>) <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(x, <span style=\"color:rgb(0,135,0)\">int</span>):\n<span class=\"ansi-green-fg\">----&gt; 3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Sorry, x must be numeric</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> x<span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">1</span>\n\n<span class=\"ansi-red-fg\">Exception</span>: Sorry, x must be numeric</pre>\n```\n:::\n\n:::\n:::\n\n\n-   This is useful when your function is complicated and would fail in a complicated way, with a weird error message.\n\n-   You can make the cause of the error much clearer to the *caller* of the function.\n\n-   Thus, your function is more usable this way.\n\n-   If you do this, you should ideally describe these exceptions in the function documentation, so a user knows what to expect if they call your function.\n\n-   You can also raise other types of exceptions, or even define your own exception types, as in lab 2.\n\n-   You can also use `raise` by itself to raise whatever exception was going on:\n\n::: {#e48a3a91 .cell execution_count=90}\n``` {.python .cell-code}\ntry:\n    this_variable_does_not_exist\nexcept:\n    print(\"You did something bad!\")\n    raise\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou did something bad!\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[90], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">this_variable_does_not_exist</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span>:\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">You did something bad!</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'this_variable_does_not_exist' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n-   Here, the original exception is raised after we ran some other code.\n\n## Testing\n\n### `assert` statements\n\n-   `assert` statementS cause your program to fail if the condition is `False`.\n-   They can be used as sanity checks for your program.\n-   There are more sophisticated way to \"test\" your programs, which we'll discuss in Workflows.\n-   The syntax is:\n\n``` python\nassert expression , \"Error message if expression is False or raises an error.\"\n```\n\n::: {#366a0eb3 .cell execution_count=91}\n``` {.python .cell-code}\na = 4\nb = 5\n\n# Change this assert statement so a and b is used instead of \"hard-coded 1 and 2\"\nassert a == b , f\"{a} is not equal to {b}.\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AssertionError</span>                            Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[91], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> b <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">5</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Change this assert statement so a and b is used instead of \"hard-coded 1 and 2\"</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> a <span style=\"color:rgb(98,98,98)\">==</span> b , <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>a<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\"> is not equal to </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>b<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">.</span><span style=\"color:rgb(175,0,0)\">\"</span>\n\n<span class=\"ansi-red-fg\">AssertionError</span>: 4 is not equal to 5.</pre>\n```\n:::\n\n:::\n:::\n\n\n### Systematic Program Design\n\nA systematic approach to program design is a general set of steps to follow when writing programs.\nOur approach includes:\n\n1.  Write a stub: a function that does nothing but accept all input parameters and return the correct datatype.\n2.  Write tests to satisfy the design specifications.\n3.  Outline the program with pseudo-code.\n4.  Write code and test frequently.\n5.  Write documentation.\n\nThe key point: write tests BEFORE you write code.\n\n-   You do not have to do this in MDS, but you may find it surprisingly helpful.\n-   Often writing tests helps you think through what you are trying to accomplish.\n-   It's best to have that clear before you write the actual code.\n\n::: {#dffe8320 .cell execution_count=92}\n``` {.python .cell-code}\n# Task: Let's calculate area of a rectangle, given length and width\n```\n:::\n\n\n::: {#d7c37ada .cell execution_count=93}\n``` {.python .cell-code}\ndef calculate_rectangle_area(length, width):\n    \"\"\" Computes the area of a rectangle given a length and a width\n    inputs: length (float) and width(float)\n    \n    oututs: area (float)\n    \"\"\"\n    \n    # Check the inputs\n    # check if length and width are floats\n    \n    # Compute area\n    area = length * width\n    \n    print(f\"the area should be : {length * width} and is {area}\")\n    \n    return area\n\nassert calculate_rectangle_area(5,5) == 25, \"the function is not quite correct because the area of a 5x5 should be 25.\"\ncalculate_rectangle_area(5,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe area should be : 25 and is 25\nthe area should be : 25 and is 25\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=93}\n```\n25\n```\n:::\n:::\n\n\n### Testing woes - false positives\n\n-   **Just because all your tests pass, this does not mean your program is correct!!**\n-   This happens all the time. How to deal with it?\n    -   Write a lot of tests!\n    -   Don't be overconfident, even after writing a lot of tests!\n\n::: {#7ea8380f .cell execution_count=94}\n``` {.python .cell-code}\ndef sample_median(x):\n    \"\"\"Finds the median of a list of numbers.\"\"\"\n    x_sorted = sorted(x)\n    return x_sorted[len(x_sorted)//2]\n\nassert sample_median([1,2,3,4,5]) == 3\nassert sample_median([0,0,0,0]) == 0\n```\n:::\n\n\nLooks good?\n...\n?\n\n::: {#7bc63c2d .cell execution_count=95}\n``` {.python .cell-code}\n4//2 \n\n#is equivalent to\n\nint(4/2)\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\n2\n```\n:::\n:::\n\n\n::: {#4495a7d8 .cell execution_count=96}\n``` {.python .cell-code}\nassert sample_median([1,2,3,4]) == 2.5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AssertionError</span>                            Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[96], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> sample_median([<span style=\"color:rgb(98,98,98)\">1</span>,<span style=\"color:rgb(98,98,98)\">2</span>,<span style=\"color:rgb(98,98,98)\">3</span>,<span style=\"color:rgb(98,98,98)\">4</span>]) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">2.5</span>\n\n<span class=\"ansi-red-fg\">AssertionError</span>: </pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#aae25e2f .cell execution_count=97}\n``` {.python .cell-code}\nassert sample_median([1,3,2]) == 2\n```\n:::\n\n\n### Testing woes - false negatives\n\n-   It can also happen, though more rarely, that your tests fail but your program is correct.\n-   This means there is something wrong with your test.\n-   For example, in the autograding for lab1 this happened to some people, because of tiny roundoff errors.\n\n### Corner cases\n\n-   A **corner case** is an input that is reasonable but a bit unusual, and may trip up your code.\n-   For example, taking the median of an empty list, or a list with only one element.\n-   Often it is desirable to add test cases to address corner cases.\n\n::: {#0bb323ed .cell execution_count=98}\n``` {.python .cell-code}\nassert sample_median([1]) == 1\n```\n:::\n\n\n-   In this case the code worked with no extra effort, but sometimes we need `if` statements to handle the weird cases.\n-   Sometimes we **want** the code to throw an error (e.g. median of an empty list)\n\n## Questions and Recap?\n\n",
    "supporting": [
      "04_python-2_files"
    ],
    "filters": [],
    "includes": {}
  }
}