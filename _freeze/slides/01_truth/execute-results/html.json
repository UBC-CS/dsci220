{
  "hash": "1901da96a2f2c497d7ccdcd88f2d0141",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: 2026-01-06\n---\n\n\n\n# Truth\n\n## Warm-Up\n\n\nMake at least 3 observations about the following table:\n\n::::: columns\n::: {.column width=\"30%\"}\n\n| p | q | p ∨ q |\n|---|---|:--------:|\n| F | F |   F    |\n| F | T |   T    |\n| T | F |   T    |\n| T | T |   T    |\n\n:::\n\n::: {.column width=\"70%\"}\n\n*  \n\n\\\n\n*   \n\n\\\n\n*      \n\n:::\n:::::\n\n## Summary\n\nKey observations about the table:\n\n::::: columns\n::: {.column width=\"30%\"}\n\n| p | q | p ∨ q |\n|---|---|:--------:|\n| F | F |   F    |\n| F | T |   T    |\n| T | F |   T    |\n| T | T |   T    |\n\n:::\n\n::: {.column style=\"width: 70%; font-size: 80%;\"}\n\n*   The diagram is called a _Truth Table_\n*   p and q are _variables_, each of which take on one of two _Boolean_ values, True or False (T/F, 1/0) \n*   ∨ is a _binary operator_ that implements a function (creates output) from the 2 input variables to another Boolean value. It is characterized by its output values.\n*   The operator ∨ corresponds to the English word _or_. \n*   The expression p ∨ q is called a _proposition_.\n    \n:::\n:::::\n\n\n## Truth Tables\n\nSome questions to ponder:\n\n::::: columns\n::: {.column width=\"30%\"}\n\n| p | q | p ∨ q |\n|---|---|:--------:|\n| F | F |   F    |\n| F | T |   T    |\n| T | F |   T    |\n| T | T |   T    |\n\n:::\n\n::: {.column style=\"width: 70%;\"}\n\n*   How many rows for a proposition on 3 variables? _k_ variables?\n\n\n*   Give a good name for an operator that takes 1 variable: __________\n\n\n*   Give a good name for an operator that takes 3 variables: __________\n\n\n*   How many different binary operators could there be? \n \n:::\n:::::\n\n## Truth Tables\n\nAll graded learning activities in the course will use a tool called _PrairieLearn_. \n\nNavigate to today's activity and complete question 1\n\n{{< qrcode https://us.prairielearn.com/pl/course_instance/186238/assessment/2562335 >}}\n\n<https://us.prairielearn.com/pl/course_instance/186238/assessment/2562335>\n\n## Beyond Operators\n\n_Propositions_ can be more complex than just a single operator! \n\nExample:\n\n\n| p | q | ~(p ∨ q) |\n|---|---|:--------:|\n| F | F |   T    |\n| F | T |   F    |\n| T | F |   F    |\n| T | T |   F    |\n\n## WFFs\n\nA _well-formed formula_ is a Boolean statement generated by the following rules:\n\n```{bnf}\n<wff> ::= <atom>\n        | ~ <wff>\n        | ( <wff> ∧ <wff> )\n        | ( <wff> ∨ <wff> )\n\n<atom> ::= p | q | r | s | ...\n\n```\n\nSpeculate:\n\n*\n*\n*\n\n\n## WFFs\n\nA _well-formed formula_ is a Boolean statement generated by the following rules:\n\n```{bnf}\n<wff> ::= <atom>\n        | ~ <wff>\n        | ( <wff> ∧ <wff> )\n        | ( <wff> ∨ <wff> )\n\n<atom> ::= p | q | r | s | ...\n\n```\n\nThis definition is in the form of a _Grammar_. \n\n_____________: `<wff>` and `<atom>`\n\n_____________: `p`, `q`, `r`, `s` ...\n\nIt is our first self-referential or _recursive_ definition. \n\n## WFFs\n\n```{bnf}\n<wff> ::= <atom>\n        | ~ <wff>\n        | ( <wff> ∧ <wff> )\n        | ( <wff> ∨ <wff> )\n\n<atom> ::= p | q \n\n```\nExample derivation:\n\n`<wff>`\n\n## WFFs (Notes)\n\n```{bnf}\n<wff> ::= <atom>\n        | ~ <wff>\n        | ( <wff> ∧ <wff> )\n        | ( <wff> ∨ <wff> )\n\n<atom> ::= p | q \n\n```\n\n* Grammars can be used to construct _many_ different sequences. \n\n* We could have included additional operators $\\rightarrow$, $\\leftrightarrow$, $\\oplus$, $\\uparrow$\n\n* Computational evaluation of `<wff>`is covered in DSCI221. For now, we trust Python and focus on logic.\n\n* The `<wff>` are _propositions_. \n\n## Logical Equivalence\n\n\\\n\nEx: Is it true that $(p \\lor q) \\equiv (q\\lor p)$ ?\n\n\\\n\nDiscussion points:\n\n* $\\equiv$ means _logically equivalent_\n\n* The answer had better be <b>YES!</b>\n\n* How can we justify our instinct?\n\n\n\n\n\n## You?\n\nQuestions:\n\n1.  What's an ideal factoid? One that...\\\n2.  What's the least number of questions we can hope for?\n\n[Why did we do this?]{.fragment}\n\n## Where to start? {.center}\n\nCanvas: <https://canvas.ubc.ca/courses/130127>\n\n##  {.bg-how-learning-works data-menu-title=\"Elements of mastery\"}\n\n##  {background-iframe=\"https://firas.moosvi.com/courses/cpsc203/2023_WT2\" background-interactive=\"true\" data-menu-title=\"Course Website\"}\n\n## About This Course\n\nThis course will teach you a bajillion different things!\n\n-   Tools: Terminal, Markdown, Git, Visual Studio Code, PrairieLearn\n-   Computer science: Python (!!!), efficiency, web scraping, graphs\n-   Data science: Pandas, DataFrames, visualizations\n-   Algorithms: many algorithms!\n-   Art and creativity: lots of examples!\n\n## Course Designer – Dr. Cinda Heeren!\n\n::::: columns\n::: {.column width=\"60%\"}\n-   Teaching Professor, at UBC since 2017 (previously at University of Illinois Urbana-Champaign).\n\n-   Teaches mid-level required courses for CS specializations (mostly CPSC 221) & a similar course for non-majors!\n:::\n\n::: {.column width=\"40%\"}\n![](/images/cinda-heeren.jpg){fig-alt=\"Course designer Dr. Cinda Heeren\"}\n:::\n:::::\n\n## Course Components\n\n**Lectures:** in-class activities based on problem solving and design.\n\n**Labs:** practice on lecture material\n\n**Problems of the day (POTD):** one per (week)day, 5/week, \\~ 50 / term\n\n**Projects:** 3 total\n\n**Assessments:** 6 tests (examlets) + final\n\n## Passing Requirements\n\nYou must satisfy **ALL** conditions to pass the course:\n\n1.  Earn a grade of at least 50% in the Lab component.\n2.  Achieve a minimum grade of 50% in both the Test and Exam components combined.\n3.  Pass the Final Exam with a minimum grade of 40%.\n\nIf students do not satisfy the appropriate requirements, the student will be assigned the **lower** of their earned course grade or a maximum overall grade of 45 in the course.\n\n## Evaluation\n\n::: small-font-size\n| Item                 | Weight          | Due date(s)       |\n|----------------------|-----------------|-------------------|\n| Learning Logs        | 5% (10 x 0.5%)  | Saturdays at 6 PM |\n| Problems of the Week | 25% (10 x 2.5%) | Fridays at 6 PM   |\n| Labs                 | 5% (10 x 0.5%)  | Fridays at 6 PM   |\n| Programming Projects | 15% (3 x 5%)    | Three in the term |\n| Tests (Examlets)     | 30% (6 x 5%)    | \\~ Bi-weekly      |\n| Final Exam           | 20%             | TBD               |\n\n: Course grading scheme: There will be 6 tests in this course in an (approximately) bi-weekly schedule.\n:::\n\n::: callout-important\n## Grace period for due dates\n\nAll due dates in this course have an automatic 48-hour grace period after the due dates listed above.\nAny submissions submitted past the grace period will not be graded (with some exceptions).\n:::\n\n## Semester overview {.smaller}\n\n+-----------+-------------------+-------------------------------+------------------------------+-----------------------+----------------------------+\n| Handcraft | Billboard Hot 100 | The Overstory and Pointillism | Artificial Music Composition | Road Trip Planning    | Spiderman's Social Network |\n+===========+===================+===============================+==============================+=======================+============================+\n| Design    | Web Scraping      | Voronoi Diagrams              | Markov Chains                | Traveling Salesperson | Natural Language           |\n|           |                   |                               |                              |                       |                            |\n| Objects   | Data Frames       | Efficiency                    | Random Numbers               | Intractable Problems  |                            |\n|           |                   |                               |                              |                       |                            |\n| Iteration | MatPlotLib        |                               | Graphs                       |                       |                            |\n+-----------+-------------------+-------------------------------+------------------------------+-----------------------+----------------------------+\n\nThis course consists of a sequence of six explorations, assembled to provide a tour through data structure applications and algorithmic design.\nBuilt around topics from arts, sciences, and technology, the explorations are thought provoking and engaging.\nYou will emerge from the course with increased proficiency in Python programming, and with a broad spectrum of tools for algorithmic problem solving.\n\n## Course Tools\n\n**Ed Discussion:** class discussion forum\n\n**PrairieLearn:** platform to help us give you feedback on work you do!\n\n**GitHub:** code repository and version control\n\n**Visual Studio Code:** developer environment\n\n**Canvas:** basically just a place for you to find all the relevant links to things…\n\n# Any questions before we continue?\n\n# Break\n\n{{< countdown minutes=5 >}}\n\n## Tangrams\n\n::: {layout=\"[35.7,5,59.3]\" layout-valign=\"center\"}\n![](/images/tangram-square.png){fig-alt=\"The different geometric shapes of a tangram form a square.\"}\n\n{{< iconify fa6-solid arrow-right size=2xl >}}\n\n![](/images/tangram-house.png){fig-alt=\"The different geometric shapes of a tangram form a house\"}\n:::\n\n## {{< var icon.computer-activity >}} Your turn: tangrams {.activity}\n\n1.  Define a small working group of size up to 4.\n\n2.  One of you share: <https://mathigon.org/tangram>\n\n3.  Solve as many as you'd like, together\n\n4.  Speculate together on why you're doing this!!\n\n{{< countdown minutes=10 >}}\n\n# Let's learn <br> {{< iconify fa6-brands markdown >}} Markdown\n\n{{< countdown minutes=20 >}}\n\n## {{< var icon.computer-activity >}} Your turn: time to practice Markdown! {.activity}\n\n{{< countdown minutes=20 >}}\n\n# The Magic Number for today <br> <br> \\_\\_\\_\\_\\_\\_ <br> <br> See you Thursday! {style=\"text-align: center;\"}\n\n",
    "supporting": [
      "01_truth_files"
    ],
    "filters": [],
    "includes": {}
  }
}